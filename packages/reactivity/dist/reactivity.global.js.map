{
  "version": 3,
  "sources": ["../src/index.ts", "../src/effect.ts", "../../shared/src/index.ts", "../src/reactive.ts"],
  "sourcesContent": ["export {effect} from \"./effect\";\r\nexport {reactive} from \"./reactive\";\r\n", "export function effect(){\r\n    \r\n}", "export const isObject = (value)=>{\r\n    return typeof value === 'object' && value !== null\r\n}", "import { isObject } from \"@vue/shared\";\r\n// 1) \u5C06\u6570\u636E\u8F6C\u6362\u6210\u54CD\u5E94\u5F0F\u7684\u6570\u636E  \u53EA\u80FD\u505A\u5BF9\u8C61\u7684\u5E26\u6765\r\n// 2) \u5904\u7406\u4E00\u4E2A\u5BF9\u8C61\u88AB\u4EE3\u7406\u591A\u6B21 \u589E\u52A0\u7F13\u5B58\u673A\u5236\r\n// 3) \u5904\u7406proxy\u5BF9\u8C61\u518D\u6B21\u88AB\u4EE3\u7406\u7684\u95EE\u9898 \r\nconst reactiveMap = new WeakMap() // key\u53EA\u80FD\u662F\u5BF9\u8C61\r\nconst enum ReactiveMap {\r\n    IS_REACTIVE = \"__v_isReactive\"\r\n}\r\nexport function reactive(target) {\r\n    if (!isObject(target)) {\r\n        return\r\n    }\r\n    if (target[ReactiveMap.IS_REACTIVE]) {\r\n        return target\r\n    }\r\n    let existingProxy = reactiveMap.get(target);\r\n    if (existingProxy) {\r\n        return existingProxy;\r\n    }\r\n    // \u5E76\u6CA1\u6709\u91CD\u65B0\u5B9A\u4E49\u5C5E\u6027\uFF0C\u53EA\u662F\u4EE3\u7406 \u518D\u53D6\u503C\u7684\u65F6\u5019\u8C03\u7528get \u8D4B\u503C\u7684\u65F6\u5019\u8C03\u7528set\r\n    const proxy = new Proxy(target, {\r\n        get(target, key, receiver) {\r\n            // \u5224\u65AD\u91CD\u590D\u4EE3\u7406\u95EE\u9898\u8FD4\u56DE\u503C\r\n            if (key === ReactiveMap.IS_REACTIVE) {\r\n                return true\r\n            }\r\n            // \u76D1\u63A7\u7528\u6237\u53D6\u503C\r\n            return Reflect.get(target, key, receiver)\r\n        },\r\n        set(target, key, value, receiver) {\r\n            // \u76D1\u63A7\u7528\u6237\u8BBE\u7F6E\u503C\r\n            return Reflect.set(target, key, value, receiver)\r\n        }\r\n    })\r\n    reactiveMap.set(target, proxy);\r\n    return proxy\r\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAO,oBAAiB;AAAA,EAExB;;;ACFO,MAAM,WAAW,CAAC,UAAQ;AAC7B,WAAO,OAAO,UAAU,YAAY,UAAU;AAAA,EAClD;;;ACEA,MAAM,cAAc,oBAAI,QAAQ;AAIzB,oBAAkB,QAAQ;AAC7B,QAAI,CAAC,SAAS,MAAM,GAAG;AACnB;AAAA,IACJ;AACA,QAAI,OAAO,qCAA0B;AACjC,aAAO;AAAA,IACX;AACA,QAAI,gBAAgB,YAAY,IAAI,MAAM;AAC1C,QAAI,eAAe;AACf,aAAO;AAAA,IACX;AAEA,UAAM,QAAQ,IAAI,MAAM,QAAQ;AAAA,MAC5B,IAAI,SAAQ,KAAK,UAAU;AAEvB,YAAI,QAAQ,oCAAyB;AACjC,iBAAO;AAAA,QACX;AAEA,eAAO,QAAQ,IAAI,SAAQ,KAAK,QAAQ;AAAA,MAC5C;AAAA,MACA,IAAI,SAAQ,KAAK,OAAO,UAAU;AAE9B,eAAO,QAAQ,IAAI,SAAQ,KAAK,OAAO,QAAQ;AAAA,MACnD;AAAA,IACJ,CAAC;AACD,gBAAY,IAAI,QAAQ,KAAK;AAC7B,WAAO;AAAA,EACX;",
  "names": []
}
